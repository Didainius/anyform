#!/usr/bin/env bash

# Enable strict mode to catch errors and undefined variables
set -euo pipefail

# Initialize variables to prevent unbound variable errors
TEMP_DIR=""
REPO_ADDRESS=""
COMMIT_VERSION=""
IS_PR=false
PR_NUMBER=""

# Version
VERSION="v0.10.0"

# Initialize flag variables
PRINT_CONFIG=false
SILENT=false
OPENTOFU_ONLY=false

# Function to print error messages
print_error() {
    echo "Error: $1" >&2
}

# Function to cleanup temporary files
cleanup() {
    local exit_code=$?
    if [ -n "${TEMP_DIR}" ] && [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
    trap - EXIT INT TERM
    exit $exit_code
}

# Register cleanup handler
trap cleanup EXIT INT TERM

# Check if dependencies are installed before proceeding
if ! command -v curl > /dev/null 2>&1; then
    print_error "curl is not installed. Please install curl to continue."
    exit 1
fi

if ! command -v unzip > /dev/null 2>&1; then
    print_error "unzip is not installed. Please install unzip to continue."
    exit 1
fi

# Check if curl is installed and executable
if ! command -v curl > /dev/null 2>&1 || ! curl --version > /dev/null 2>&1; then
    print_error "curl is not installed. Please install curl to use self-update feature."
    exit 1
fi

# Function to check for latest version
check_latest_version() {
    if ! command -v curl > /dev/null 2>&1; then
        print_error "curl is not installed. Please install curl to use self-update feature."
        exit 1
    fi
    
    LATEST_VERSION=$(curl -s https://api.github.com/repos/Didainius/anyform/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    if [ -z "$LATEST_VERSION" ] || ! [[ "$LATEST_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        print_error "Failed to fetch latest version information"
        exit 1
    fi
    echo $LATEST_VERSION
}

# Function to compare semantic versions
# Returns 1 if version1 > version2, 0 if equal, -1 if version1 < version2
compare_versions() {
    version1=$(echo "$1" | sed 's/^v//')
    version2=$(echo "$2" | sed 's/^v//')
    
    if [ "$version1" = "$version2" ]; then
        echo 0
        return
    fi
    
    IFS='.' read -r v1_major v1_minor v1_patch <<< "${version1}"
    IFS='.' read -r v2_major v2_minor v2_patch <<< "${version2}"
    
    # Extract numeric parts (handle cases like "1.2.3-beta")
    v1_patch=$(echo "$v1_patch" | sed 's/[^0-9].*//')
    v2_patch=$(echo "$v2_patch" | sed 's/[^0-9].*//')
    
    # Convert empty values to 0
    v1_major=${v1_major:-0}
    v1_minor=${v1_minor:-0}
    v1_patch=${v1_patch:-0}
    v2_major=${v2_major:-0}
    v2_minor=${v2_minor:-0}
    v2_patch=${v2_patch:-0}
    
    if [ "$v1_major" -gt "$v2_major" ] 2>/dev/null; then
        echo 1
    elif [ "$v1_major" -lt "$v2_major" ] 2>/dev/null; then
        echo -1
    elif [ "$v1_minor" -gt "$v2_minor" ] 2>/dev/null; then
        echo 1
    elif [ "$v1_minor" -lt "$v2_minor" ] 2>/dev/null; then
        echo -1
    elif [ "$v1_patch" -gt "$v2_patch" ] 2>/dev/null; then
        echo 1
    elif [ "$v1_patch" -lt "$v2_patch" ] 2>/dev/null; then
        echo -1
    else
        echo 0
    fi
}

# Function to check if we have write permissions
check_write_permissions() {
    local target="$1"
    
    # Check if file exists and we have write permissions
    if [ -f "$target" ] && [ ! -w "$target" ]; then
        print_error "Insufficient permissions to modify $target"
        echo "Please run with sudo: sudo anyform --self-update"
        return 1
    fi
    
    # Check if directory is writable if file doesn't exist
    local target_dir=$(dirname "$target")
    if [ ! -w "$target_dir" ]; then
        print_error "Insufficient permissions to write to $target_dir"
        echo "Please run with sudo: sudo anyform --self-update"
        return 1
    fi
    
    return 0
}

# Function to perform self-update
self_update() {
    LATEST_VERSION=$(check_latest_version)
    COMPARE_RESULT=$(compare_versions "$LATEST_VERSION" "$VERSION")
    
    if [ "$COMPARE_RESULT" -eq 0 ]; then
        echo "Already running the latest version $VERSION"
        exit 0
    elif [ "$COMPARE_RESULT" -eq -1 ]; then
        print_error "Latest available version ($LATEST_VERSION) is older than current version ($VERSION)"
        exit 1
    fi
    
    # Find current script location
    CURRENT_SCRIPT="$(command -v anyform)"
    if [ -z "$CURRENT_SCRIPT" ]; then
        CURRENT_SCRIPT="$0"
    fi
    
    # Check permissions before proceeding
    if ! check_write_permissions "$CURRENT_SCRIPT"; then
        exit 1
    fi
    
    echo "Updating from $VERSION to $LATEST_VERSION..."
    TEMP_FILE=$(mktemp)
    
    if curl -L "https://github.com/Didainius/anyform/releases/latest/download/anyform" -o "$TEMP_FILE"; then
        chmod +x "$TEMP_FILE"
        if mv "$TEMP_FILE" "$CURRENT_SCRIPT"; then
            # Set proper permissions (readable and executable by all, writable only by owner)
            chmod 755 "$CURRENT_SCRIPT"
            echo "Successfully updated to $LATEST_VERSION"
        else
            rm -f "$TEMP_FILE"
            print_error "Failed to move updated script to $CURRENT_SCRIPT"
            exit 1
        fi
    else
        rm -f "$TEMP_FILE"
        print_error "Failed to download update"
        exit 1
    fi
}

# Function to check if update is available
check_update() {
    LATEST_VERSION=$(check_latest_version)
    COMPARE_RESULT=$(compare_versions "$LATEST_VERSION" "$VERSION")
    
    if [ "$COMPARE_RESULT" -eq 0 ]; then
        echo "You are running the latest version $VERSION"
        exit 0
    elif [ "$COMPARE_RESULT" -eq -1 ]; then
        echo "Warning: Latest available version ($LATEST_VERSION) is older than current version ($VERSION)"
        exit 1
    else
        echo "Update available: $VERSION -> $LATEST_VERSION"
        echo "Run 'anyform --self-update' to update"
        exit 0
    fi
}

# Function to print usage
print_usage() {
    echo "Usage: $0 [--print-configuration | -p] [--version] [--self-update | -U] [--check-update] [--silent | -s] [--opentofu] <repository-address> [git-commit-version]"
    echo "Options:"
    echo "  --print-configuration, -p  Print the Terraform configuration block"
    echo "  --version                  Print version information"
    echo "  --self-update, -U          Update anyform to the latest version"
    echo "  --check-update             Check if a new version is available"
    echo "  --silent, -s               Run in silent mode (no output except errors)"
    echo "  --opentofu                 Install for OpenTofu only (skip Terraform)"
    echo "  -h, --help                 Show this help message"
    echo "Note: Repository address can be:"
    echo "  - Repository URL: https://github.com/<organization>/terraform-provider-<name>"
    echo "  - Pull Request URL: https://github.com/<organization>/terraform-provider-<name>/pull/<number>"
    echo "If git-commit-version is not specified, the latest commit from default branch or PR will be used"
}

# Function to print messages unless in silent mode
print_message() {
    if [ "$SILENT" = false ]; then
        echo "$1"
    fi
}

# Check if the correct number of arguments are provided
if [ "$#" -lt 1 ]; then
    print_usage
    exit 1
fi

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --print-configuration|-p)
            PRINT_CONFIG=true
            shift
            ;;
        --version)
            echo "AnyForm version $VERSION"
            exit 0
            ;;
        --self-update|-U)
            self_update
            exit 0
            ;;
        --check-update)
            check_update
            exit 0
            ;;
        --silent|-s)
            SILENT=true
            shift
            ;;
        --opentofu)
            OPENTOFU_ONLY=true
            shift
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            if [ -z "$REPO_ADDRESS" ]; then
                REPO_ADDRESS=$1
            elif [ -z "$COMMIT_VERSION" ]; then
                COMMIT_VERSION=$1
            else
                print_usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate required arguments
if [ -z "$REPO_ADDRESS" ]; then
    print_usage
    exit 1
fi

# Extract provider information and organization from repository address
GITHUB_PATTERN="https://github.com/([^/]+)/"
PROVIDER_PATTERN="terraform-provider-([^/]+)"
PR_PATTERN="https://github.com/[^/]+/[^/]+/pull/([^/]+)"  # Changed pattern to match any non-slash characters

# Check if it's a PR URL
IS_PR=false
PR_NUMBER=""
if [[ $REPO_ADDRESS =~ $PR_PATTERN ]]; then
    IS_PR=true
    PR_NUMBER="${BASH_REMATCH[1]}"
    # Validate PR number is numeric and positive
    if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
        print_error "Invalid pull request number: $PR_NUMBER"
        echo "Pull request number must be a positive integer"
        exit 1
    fi
    # Convert PR URL to repository URL
    REPO_ADDRESS=$(echo $REPO_ADDRESS | sed "s/\/pull\/${PR_NUMBER}//")  # Updated to use the actual PR_NUMBER
fi

# Extract organization from GitHub URL
if [[ $REPO_ADDRESS =~ $GITHUB_PATTERN ]]; then
    ORGANIZATION="${BASH_REMATCH[1]}"
else
    print_error "Unable to extract organization from repository address"
    echo "Repository address must be in format: https://github.com/<organization>/terraform-provider-<name>"
    exit 1
fi

# Extract provider information
if [[ $REPO_ADDRESS =~ $PROVIDER_PATTERN ]]; then
    PROVIDER_NAME="terraform-provider-${BASH_REMATCH[1]}"
    PROVIDER_TYPE="${BASH_REMATCH[1]}"
else
    print_error "Unable to extract provider name from repository address"
    echo "Repository name must be in format: terraform-provider-<name>"
    exit 1
fi

print_message "Organization: $ORGANIZATION"
print_message "Provider Name: $PROVIDER_NAME"
print_message "Provider Type: $PROVIDER_TYPE"

# Check if git is installed and executable
if ! command -v git > /dev/null 2>&1 || ! git --version > /dev/null 2>&1; then
    print_error "git is not installed. Please install git and try again."
    exit 1
fi

# Check if go is installed and executable
if ! command -v go > /dev/null 2>&1 || ! go version > /dev/null 2>&1; then
    print_error "Go is not installed. Please install Go and try again."
    exit 1
fi

# Print the provided arguments
print_message "Repository Address: $REPO_ADDRESS"
if [ -n "$COMMIT_VERSION" ]; then
    print_message "Git Commit Version: $COMMIT_VERSION"
fi

# Create temporary directory for initial clone
TEMP_DIR="/tmp/${PROVIDER_NAME}"
if [ ! -d "$TEMP_DIR" ]; then
    mkdir -p "$TEMP_DIR"
    if [ "$SILENT" = true ]; then
        git clone "$REPO_ADDRESS" "$TEMP_DIR" >/dev/null 2>&1
    else
        git clone "$REPO_ADDRESS" "$TEMP_DIR"
    fi
    if [ $? -ne 0 ]; then
        print_error "Failed to clone repository"
        exit 1
    fi
fi

# Change to temp directory and update repository
cd "$TEMP_DIR"
if [ "$SILENT" = true ]; then
    git fetch --all --tags >/dev/null 2>&1
else
    git fetch --all --tags
fi

if [ "$IS_PR" = true ]; then
    print_message "Fetching Pull Request #$PR_NUMBER"
    if [ "$SILENT" = true ]; then
        git fetch origin "pull/$PR_NUMBER/head:pr-$PR_NUMBER" >/dev/null 2>&1
    else
        git fetch origin "pull/$PR_NUMBER/head:pr-$PR_NUMBER"
    fi
    if [ $? -ne 0 ]; then
        print_error "Failed to fetch PR #$PR_NUMBER"
        exit 1
    fi
    # If no specific commit version provided, use the PR branch
    if [ -z "$COMMIT_VERSION" ]; then
        COMMIT_VERSION="pr-$PR_NUMBER"
    fi
fi

# Determine commit version early
if [ -n "$COMMIT_VERSION" ]; then
    if ! git rev-parse --quiet --verify "$COMMIT_VERSION^{commit}" >/dev/null; then
        print_error "Failed to verify commit $COMMIT_VERSION"
        exit 1
    fi
else
    echo "No commit version specified, using latest commit from default branch"
    DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
    git fetch origin $DEFAULT_BRANCH
    COMMIT_VERSION=$(git rev-parse origin/$DEFAULT_BRANCH)
    echo "Using commit: $COMMIT_VERSION"
fi

# Checkout the determined version
if [ "$SILENT" = true ]; then
    git checkout "$COMMIT_VERSION" >/dev/null 2>&1
else
    git checkout "$COMMIT_VERSION"
fi
if [ $? -ne 0 ]; then
    print_error "Failed to checkout commit $COMMIT_VERSION"
    exit 1
fi

# Emit the version tag that was checked out
CHECKED_OUT_VERSION=$(git describe --tags 2>/dev/null)
print_message "Checked out version: $CHECKED_OUT_VERSION"

# Perform go build with verbose flag
OUTPUT_BINARY="${PROVIDER_NAME}_${CHECKED_OUT_VERSION}"
if [ "$SILENT" = true ]; then
    go build -o "$OUTPUT_BINARY" >/dev/null 2>&1
else
    go build -o "$OUTPUT_BINARY"
fi
if [ $? -ne 0 ]; then
    print_error "Failed to build"
    exit 1
fi

# Function to get installation paths
get_installation_paths() {
    local goos=$1
    local goarch=$2
    local org=$3
    local provider=$4
    local version=$5
    
    # Ensure we have valid OS and ARCH
    [ -z "$goos" ] && goos=$(go env GOOS)
    [ -z "$goarch" ] && goarch=$(go env GOARCH)
    
    local version_no_prefix=$(echo "$version" | sed 's/^v//')
    
    if [ "$OPENTOFU_ONLY" = true ]; then
        echo "$HOME/.terraform.d/plugins/registry.opentofu.org/${org}/${provider}/${version_no_prefix}/${goos}_${goarch}"
    else
        echo "$HOME/.terraform.d/plugins/registry.terraform.io/${org}/${provider}/${version_no_prefix}/${goos}_${goarch}"
    fi
}

# Get installation path using the checked out version
GOOS=$(go env GOOS)
GOARCH=$(go env GOARCH)
INSTALL_PATH=$(get_installation_paths "$GOOS" "$GOARCH" "$ORGANIZATION" "$PROVIDER_TYPE" "$CHECKED_OUT_VERSION")

# Create directory and copy binary
mkdir -p "$INSTALL_PATH"
cp "$OUTPUT_BINARY" "$INSTALL_PATH/"
if [ $? -ne 0 ]; then
    print_error "Failed to copy binary to $INSTALL_PATH"
    exit 1
fi
print_message "Binary installed to: $INSTALL_PATH/$OUTPUT_BINARY"

# Clean up the original binary
rm "$OUTPUT_BINARY"

# Only print the configuration block if --print-configuration was provided
if [ "$PRINT_CONFIG" = true ]; then
    VERSION_NO_PREFIX=$(echo "$CHECKED_OUT_VERSION" | sed 's/^v//')
    if [ "$SILENT" = false ]; then
        if [ "$OPENTOFU_ONLY" = true ]; then
            echo "To use this provider in your OpenTofu configuration, add the following block:"
        else
            echo "To use this provider in your Terraform configuration, add the following block:"
        fi
    fi
    echo "
terraform {
  required_providers {
    $PROVIDER_TYPE = {
      source = \"$ORGANIZATION/$PROVIDER_TYPE\"
      version = \"$VERSION_NO_PREFIX\"
    }
  }
}
"
fi